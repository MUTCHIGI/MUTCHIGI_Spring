# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    # 1. Java 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 2. Spring Boot 애플리케이션 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v1
      with:
        build-root-directory: MUTCHIGI
        gradle-version: '8.11'
        arguments: clean bootJar

    # 3. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/mutchigi:latest ./MUTCHIGI

    # 4. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 5. Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKER_USERNAME }}/mutchigi:latest
    
  run-docker-image-on-ec2:
      # build-docker-image (위)과정이 완료되어야 실행됩니다.
      needs: build-docker-image
      runs-on: self-hosted
  
      steps:
        # 1. 최신 이미지를 풀받습니다
        - name: docker pull
          run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/mutchigi:latest
        
        # 2. 현재 실행 중인 컨테이너 확인
        - name: Check running container
          id: check_container
          run: |
            CURRENT_CONTAINER=$(sudo docker ps --filter "name=mutchigi-" --format "{{.Names}}" | head -n 1)
            echo "CURRENT_CONTAINER=$CURRENT_CONTAINER" >> $GITHUB_OUTPUT
            
            if [[ "$CURRENT_CONTAINER" == "mutchigi-blue" ]]; then
              echo "NEW_CONTAINER=mutchigi-green" >> $GITHUB_OUTPUT
              echo "NEW_PORT=8444" >> $GITHUB_OUTPUT
            else
              echo "NEW_CONTAINER=mutchigi-blue" >> $GITHUB_OUTPUT
              echo "NEW_PORT=8443" >> $GITHUB_OUTPUT
            fi
  
        # 3. 새 컨테이너 실행
        - name: Run new container
          run: | 
            sudo docker run --name ${{ steps.check_container.outputs.NEW_CONTAINER }} --rm -d \
              -p ${{ steps.check_container.outputs.NEW_PORT }}:8443 \
              --env-file /home/ubuntu/envfile/.env \
              -v /home/ubuntu/demucsFile:/home/ubuntu/demucsFile \
              -v /home/ubuntu/thumbnailURL:/home/ubuntu/thumbnailURL \
              -v /home/ubuntu/envfile/capston-test-436509-5ae1c05bd29d.json:/app/resources/capston-test-436509-5ae1c05bd29d.json \
              -v /home/ubuntu/envfile/keystore.pfx:/app/resources/keystore.pfx \
              ${{ secrets.DOCKER_USERNAME }}/mutchigi:latest
              
        # 4. 새 컨테이너 헬스 체크
        - name: Health check for new container
          run: |
            sleep 10
            
            if ! sudo docker ps | grep -q ${{ steps.check_container.outputs.NEW_CONTAINER }}; then
              echo "New container failed to start"
              exit 1
            fi
              
        # 5. Nginx 설정 업데이트 - upstream 변경
        - name: Update Nginx configuration
          run: |
            if [[ "${{ steps.check_container.outputs.NEW_CONTAINER }}" == "mutchigi-blue" ]]; then
              sudo sed -i 's/server localhost:8444;/server localhost:8443;/g' /etc/nginx/nginx.conf
              sudo sed -i 's/server localhost:8443 backup;/server localhost:8444 backup;/g' /etc/nginx/nginx.conf
            else
              sudo sed -i 's/server localhost:8443;/server localhost:8444;/g' /etc/nginx/nginx.conf
              sudo sed -i 's/server localhost:8444 backup;/server localhost:8443 backup;/g' /etc/nginx/nginx.conf
            fi
            
            sudo nginx -t && sudo nginx -s reload
            
        # 6. 이전 컨테이너 종료 (있는 경우에만)
        - name: Stop previous container
          if: steps.check_container.outputs.CURRENT_CONTAINER != ''
          run: |
            sleep 5
            sudo docker stop ${{ steps.check_container.outputs.CURRENT_CONTAINER }} || true
  
        # 7. 미사용 이미지를 정리합니다
        - name: Delete old docker image
          run: sudo docker system prune -f
