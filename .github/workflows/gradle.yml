# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    # 1. Java 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 2. Spring Boot 애플리케이션 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v1
      with:
        build-root-directory: MUTCHIGI
        gradle-version: '8.11'
        arguments: clean bootJar

    # 3. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/mutchigi:latest ./MUTCHIGI

    # 4. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 5. Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKER_USERNAME }}/mutchigi:latest
    
  run-docker-image-on-ec2:
      # build-docker-image (위)과정이 완료되어야 실행됩니다.
      needs: build-docker-image
      runs-on: self-hosted
  
      steps:
        # 1. 최신 이미지를 풀받습니다
        - name: docker pull
          run: sudo docker pull ${{ secrets.DOCKER_USERNAME }}/mutchigi
        
        # 2. 기존의 컨테이너를 중지시킵니다
        - name: docker stop container
          run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true
  
        # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
        - name: docker run new container
          run: | 
            sudo docker run --name mutchigi --rm -d \
              -p 8443:8443 \
              --env-file /home/ubuntu/envfile/.env \
              -v /home/ubuntu/demucsFile:/home/ubuntu/demucsFile \
              -v /home/ubuntu/thumbnailURL:/home/ubuntu/thumbnailURL \
              -v /home/ubuntu/envfile/capston-test-436509-894d3fd06aa1.json:/app/resources/capston-test-436509-894d3fd06aa1.json \
              -v /home/ubuntu/envfile/keystore.pfx:/app/resources/keystore.pfx \
              ${{ secrets.DOCKER_USERNAME }}/mutchigi
  
        # 4. 미사용 이미지를 정리합니다
        - name: delete old docker image
          run: sudo docker system prune -f
